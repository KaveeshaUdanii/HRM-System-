/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author USER
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



public class Show_Tables extends javax.swing.JFrame {
    // Declare a variable to hold the connection
    private Connection connection;
    
    public Show_Tables() {
        initComponents();
        try {
            connection = DBConnection.getConnection();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database connection error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        Panel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        table3 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Department_Table = new javax.swing.JButton();
        Designation_Table = new javax.swing.JButton();
        Employee_Table = new javax.swing.JButton();
        Delete_Row = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        back = new javax.swing.JButton();

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Panel1.setBackground(new java.awt.Color(204, 204, 255));

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                " Dep_ID ", "Dep_Name ", "Designation_ID"
            }
        ));
        jScrollPane2.setViewportView(table1);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Designation_ID", " Designation_Name", "Availability", " Dep_ID"
            }
        ));
        jScrollPane3.setViewportView(table2);

        table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " EPF_Number", " Name", "Contact_Number", "Designation_ID"
            }
        ));
        jScrollPane5.setViewportView(table3);

        jLabel1.setText("Department Details ");

        jLabel2.setText("Designation Details");

        jLabel3.setText("Employee Details");

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane5))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
        );

        getContentPane().add(Panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 520, 820));

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        Department_Table.setText("Department Table");
        Department_Table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Department_TableActionPerformed(evt);
            }
        });

        Designation_Table.setText("Designation Table");
        Designation_Table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Designation_TableActionPerformed(evt);
            }
        });

        Employee_Table.setText("Employee Details Table");
        Employee_Table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Employee_TableActionPerformed(evt);
            }
        });

        Delete_Row.setText("Delete Row");
        Delete_Row.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_RowActionPerformed(evt);
            }
        });

        Update.setText("Update Row");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Designation_Table, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Employee_Table, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Department_Table, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Update)
                            .addComponent(Delete_Row)
                            .addComponent(back))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(Department_Table)
                .addGap(29, 29, 29)
                .addComponent(Designation_Table)
                .addGap(32, 32, 32)
                .addComponent(Employee_Table)
                .addGap(52, 52, 52)
                .addComponent(Delete_Row)
                .addGap(28, 28, 28)
                .addComponent(Update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 446, Short.MAX_VALUE)
                .addComponent(back)
                .addGap(54, 54, 54))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 210, 820));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Department_TableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Department_TableActionPerformed
        String sql = "SELECT * FROM department_details";
        populateTable(sql, table1);
    }//GEN-LAST:event_Department_TableActionPerformed

    private void Designation_TableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Designation_TableActionPerformed
        String sql = "SELECT * FROM designation_details";
        populateTable(sql, table2);
    }//GEN-LAST:event_Designation_TableActionPerformed

    private void Employee_TableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Employee_TableActionPerformed
        String sql = "SELECT * FROM employee_details";
        populateTable(sql, table3);
    }//GEN-LAST:event_Employee_TableActionPerformed

    private void Delete_RowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_RowActionPerformed
        // Check which table is currently selected
        javax.swing.JTable selectedTable = getSelectedTable();
        if (selectedTable == null) {
            JOptionPane.showMessageDialog(null, "Please select a table.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Get primary key value based on selected row
        int selectedRow = selectedTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Object primaryKeyValue = selectedTable.getValueAt(selectedRow, 0); // Assuming the primary key is in the first column
        // Determine the table name based on the selected table
        String tableName = null;
        if (selectedTable.equals(table1)) {
            tableName = "department_details";
        } else if (selectedTable.equals(table2)) {
            tableName = "designation_details";
        } else if (selectedTable.equals(table3)) {
            tableName = "employee_details";
        }
        if (tableName != null) {
            deleteRow(tableName, "Dep_ID", primaryKeyValue); // Assuming "Dep_ID" is the primary key for all tables
        }
    }//GEN-LAST:event_Delete_RowActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // Check which table is currently selected
        javax.swing.JTable selectedTable = getSelectedTable();
        if (selectedTable == null) {
            JOptionPane.showMessageDialog(null, "Please select a table.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Get primary key value based on selected row
        int selectedRow = selectedTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Object primaryKeyValue = selectedTable.getValueAt(selectedRow, 0); // Assuming the primary key is in the first column
        // Determine the table name based on the selected table
        String tableName = null;
        if (selectedTable.equals(table1)) {
            tableName = "department_details";
        } else if (selectedTable.equals(table2)) {
            tableName = "designation_details";
        } else if (selectedTable.equals(table3)) {
            tableName = "employee_details";
        }
        if (tableName != null) {
            String[] columns = getColumnNames(selectedTable);
            Object[] values = getUpdatedValues(selectedTable, selectedRow);
            updateRow(tableName, columns, values, "Dep_ID", primaryKeyValue); // Assuming "Dep_ID" is the primary key for all tables
        }                                 
    }//GEN-LAST:event_UpdateActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        HR_Operations hrOperations = new HR_Operations();
    hrOperations.setVisible(true); // Show the HR_Operations interface
    dispose(); // Close the current window (Show_Tables)
    }//GEN-LAST:event_backActionPerformed

   

     // Method to execute SQL query and populate the table
    private void populateTable(String sql, javax.swing.JTable table) {
        try {
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            // Clear existing rows
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            // Add rows from ResultSet to the table
            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < row.length; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error executing SQL query: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Method to delete a row from the database
    private void deleteRow(String tableName, String primaryKey, Object primaryKeyValue) {
        try {
            String sql = "DELETE FROM " + tableName + " WHERE " + primaryKey + " = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setObject(1, primaryKeyValue);
            int rowsDeleted = statement.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Row deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete row.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error deleting row: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Method to update a row in the database
    private void updateRow(String tableName, String[] columns, Object[] values, String primaryKey, Object primaryKeyValue) {
        try {
            StringBuilder sqlBuilder = new StringBuilder("UPDATE " + tableName + " SET ");
            for (int i = 0; i < columns.length; i++) {
                sqlBuilder.append(columns[i]).append(" = ?");
                if (i < columns.length - 1) {
                    sqlBuilder.append(", ");
                }
            }
            sqlBuilder.append(" WHERE ").append(primaryKey).append(" = ?");
            String sql = sqlBuilder.toString();
            PreparedStatement statement = connection.prepareStatement(sql);
            for (int i = 0; i < values.length; i++) {
                statement.setObject(i + 1, values[i]);
            }
            statement.setObject(values.length + 1, primaryKeyValue);
            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Row updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update row.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error updating row: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Helper method to get the currently selected table
private javax.swing.JTable getSelectedTable() {
    if (table1.isShowing()) {
        return table1;
    } else if (table2.isShowing()) {
        return table2;
    } else if (table3.isShowing()) {
        return table3;
    }
    return null;
}

// Helper method to get column names of the selected table
private String[] getColumnNames(javax.swing.JTable selectedTable) {
    javax.swing.table.TableModel model = selectedTable.getModel();
    String[] columnNames = new String[model.getColumnCount()];
    for (int i = 0; i < columnNames.length; i++) {
        columnNames[i] = model.getColumnName(i);
    }
    return columnNames;
}

// Helper method to get updated values of the selected row
private Object[] getUpdatedValues(javax.swing.JTable selectedTable, int selectedRow) {
    javax.swing.table.TableModel model = selectedTable.getModel();
    Object[] values = new Object[model.getColumnCount()];
    for (int i = 0; i < values.length; i++) {
        values[i] = model.getValueAt(selectedRow, i);
    }
    return values;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Show_Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Show_Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Show_Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Show_Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Show_Tables().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete_Row;
    private javax.swing.JButton Department_Table;
    private javax.swing.JButton Designation_Table;
    private javax.swing.JButton Employee_Table;
    private javax.swing.JPanel Panel1;
    private javax.swing.JButton Update;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    private javax.swing.JTable table3;
    // End of variables declaration//GEN-END:variables
}
